diff --git a/node_modules/@nativescript-community/sqlite/platforms/android/include.gradle b/node_modules/@nativescript-community/sqlite/platforms/android/include.gradle
index 612a631..be968b2 100644
--- a/node_modules/@nativescript-community/sqlite/platforms/android/include.gradle
+++ b/node_modules/@nativescript-community/sqlite/platforms/android/include.gradle
@@ -5,7 +5,6 @@ android {
 }
 
 dependencies {
-    // Describe plugin native Android dependencies like
-	// implementation "groupName:pluginName:ver" 
-    // EXAMPLE: implementation "com.facebook.fresco:fresco:0.9.0+"
+  implementation 'net.zetetic:sqlcipher-android:4.9.0@aar'
+  implementation 'androidx.sqlite:sqlite:2.2.0'
 }
\ No newline at end of file
diff --git a/node_modules/@nativescript-community/sqlite/platforms/android/sqlite.aar b/node_modules/@nativescript-community/sqlite/platforms/android/sqlite.aar
new file mode 100644
index 0000000..4c19864
Binary files /dev/null and b/node_modules/@nativescript-community/sqlite/platforms/android/sqlite.aar differ
diff --git a/node_modules/@nativescript-community/sqlite/sqlite.android.d.ts b/node_modules/@nativescript-community/sqlite/sqlite.android.d.ts
index e93d850..3adc540 100644
--- a/node_modules/@nativescript-community/sqlite/sqlite.android.d.ts
+++ b/node_modules/@nativescript-community/sqlite/sqlite.android.d.ts
@@ -3,12 +3,12 @@ import { SQLiteDatabaseBase } from './sqlitedatabase.android';
 export declare class SQLiteDatabase extends SQLiteDatabaseBase implements ISQLiteDatabase {
     open(): boolean;
 }
-export declare function wrapDb(db: android.database.sqlite.SQLiteDatabase, options?: {
+export declare function wrapDb(db: net.zetetic.database.sqlcipher.SQLiteDatabase, options?: {
     readOnly?: boolean;
     transformBlobs?: boolean;
     threading?: boolean;
 }): SQLiteDatabase;
-export declare const openOrCreate: (filePath: string, options?: {
+export declare const openOrCreate: (filePath: string, password: string, options?: {
     threading?: boolean;
     transformBlobs?: boolean;
     flags?: number;
diff --git a/node_modules/@nativescript-community/sqlite/sqlite.android.js b/node_modules/@nativescript-community/sqlite/sqlite.android.js
index 9aa9075..9249f51 100644
--- a/node_modules/@nativescript-community/sqlite/sqlite.android.js
+++ b/node_modules/@nativescript-community/sqlite/sqlite.android.js
@@ -1,22 +1,33 @@
-import { Application } from '@nativescript/core';
+import { Application, Utils } from '@nativescript/core';
 import { SQLiteDatabaseBase } from './sqlitedatabase.android';
-function createDb(dbName, flags) {
+
+function createDb(dbName, password, flags) {
     if (dbName === ':memory:') {
         //noinspection JSUnresolvedVariable
-        return android.database.sqlite.SQLiteDatabase.create(flags);
+        return net.zetetic.database.sqlcipher.SQLiteDatabase.openOrCreateDatabase(
+            ":memory:",
+            password,
+            null,
+            null
+        );
     }
     if (dbName.indexOf('/') >= 0) {
-        return android.database.sqlite.SQLiteDatabase.openDatabase(dbName, null, flags !== undefined ? flags : android.database.sqlite.SQLiteDatabase.CREATE_IF_NECESSARY | android.database.sqlite.SQLiteDatabase.NO_LOCALIZED_COLLATORS);
+        return net.zetetic.database.sqlcipher.SQLiteDatabase.openDatabase(dbName, password, null, flags !== undefined ? flags : net.zetetic.database.sqlcipher.SQLiteDatabase.CREATE_IF_NECESSARY | net.zetetic.database.sqlcipher.SQLiteDatabase.NO_LOCALIZED_COLLATORS, null, null);
     }
     else {
-        const activity = Application.android.foregroundActivity || Application.android.startActivity;
-        return activity.openOrCreateDatabase(dbName, flags !== undefined ? flags : android.app.Activity.MODE_PRIVATE, null);
+        return net.zetetic.database.sqlcipher.SQLiteDatabase.openOrCreateDatabase(
+            dbName,
+            password,
+            null,
+            null,
+            null,
+        );
     }
 }
 export class SQLiteDatabase extends SQLiteDatabaseBase {
     open() {
         if (!this.db) {
-            this.db = createDb(this.filePath, this.flags);
+            this.db = createDb(this.filePath, this.password, this.flags);
             if (this.threading && !this.worker) {
                 this.worker = new Worker('./worker');
                 this.worker.onmessage = this.onWorkerMessage;
@@ -30,10 +41,10 @@ export function wrapDb(db, options) {
     obj.open();
     return obj;
 }
-export const openOrCreate = (filePath, options) => {
-    const obj = new SQLiteDatabase(filePath, options);
+export const openOrCreate = (filePath, password, options) => {
+    const obj = new SQLiteDatabase(filePath, password, options);
     obj.open();
     return obj;
 };
-export const deleteDatabase = (filePath) => android.database.sqlite.SQLiteDatabase.deleteDatabase(new java.io.File(filePath));
+export const deleteDatabase = (filePath) => net.zetetic.database.sqlcipher.SQLiteDatabase.deleteDatabase(new java.io.File(filePath));
 //# sourceMappingURL=sqlite.android.js.map
\ No newline at end of file
diff --git a/node_modules/@nativescript-community/sqlite/sqlitedatabase.android.d.ts b/node_modules/@nativescript-community/sqlite/sqlitedatabase.android.d.ts
index 80bec73..5b86ea9 100644
--- a/node_modules/@nativescript-community/sqlite/sqlitedatabase.android.d.ts
+++ b/node_modules/@nativescript-community/sqlite/sqlitedatabase.android.d.ts
@@ -2,10 +2,11 @@ import { SqliteParams } from './sqlite.common';
 export declare function byteArrayToBuffer(value: any): Uint8Array;
 export declare class SQLiteDatabaseBase {
     filePath: string;
-    db: android.database.sqlite.SQLiteDatabase;
+    db: net.zetetic.database.sqlcipher.SQLiteDatabase;
+    password: string;
     flags: any;
     transformBlobs: boolean;
-    constructor(filePathOrDb: string | android.database.sqlite.SQLiteDatabase, options?: {
+    constructor(filePathOrDb: string | net.zetetic.database.sqlcipher.SQLiteDatabase, password: string, options?: {
         threading?: boolean;
         readOnly?: boolean;
         flags?: number;
diff --git a/node_modules/@nativescript-community/sqlite/sqlitedatabase.android.js b/node_modules/@nativescript-community/sqlite/sqlitedatabase.android.js
index fdd25c9..169d6da 100644
--- a/node_modules/@nativescript-community/sqlite/sqlitedatabase.android.js
+++ b/node_modules/@nativescript-community/sqlite/sqlitedatabase.android.js
@@ -1,4 +1,7 @@
 import { paramsToStringArray, throwError } from './sqlite.common';
+
+java.lang.System.loadLibrary('sqlcipher');
+
 export function byteArrayToBuffer(value) {
     if (!value) {
         return null;
@@ -125,10 +128,10 @@ const transactionRaw = async (db, action) => {
 };
 const messagePromises = {};
 export class SQLiteDatabaseBase {
-    constructor(filePathOrDb, options) {
+    constructor(filePathOrDb, password, options) {
         this._isInTransaction = false;
         this.threading = false;
-        if (filePathOrDb instanceof android.database.sqlite.SQLiteDatabase) {
+        if (filePathOrDb instanceof net.zetetic.database.sqlcipher.SQLiteDatabase) {
             this.db = filePathOrDb;
             this.filePath = filePathOrDb.getPath();
         }
@@ -137,6 +140,7 @@ export class SQLiteDatabaseBase {
         }
         this.threading = options && options.threading === true;
         this.flags = options?.flags;
+        this.password = password || '';
         this.transformBlobs = !options || options.transformBlobs !== false;
     }
     onWorkerMessage(event) {
